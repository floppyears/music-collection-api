swagger: '2.0'

info:
  title: Music Collection API
  version: "0.1"

#consumes: [ 'application/json' ]
produces: [ 'application/json' ]

paths:
  '/shelf':
    post:
      description: |
        Create a shelf.
      parameters:
        - name: shelf
          in: body
          required: true
          description: New shelf object. Only the name attribute is allowed.
          schema:
            title: Shelf
            type: object
            properties:
              name:
                type: string
                description: The name of the new shelf
      responses:
        200:
          description: Successful response
        404:
          description: Shelf does not exist
          schema: {$ref: '#/definitions/error'}

  '/shelf/{id}':
    get:
      description: |
        GET returns details about a shelf.
      parameters:
        - name: id
          in: path
          type: number
          required: true
          description: ID of the shelf
      responses:
        200:
          description: Successful response
          schema: {$ref: '#/definitions/shelf'}
        404:
          description: Shelf does not exist
          schema: {$ref: '#/definitions/error'}

  '/shelf/{id}/albums':
    get:
      description: |
        GET returns a list of records for every album on the shelf.
      parameters:
        - name: id
          in: path
          description: ID of the shelf
          required: true
          type: number
      responses:
        200:
          description: Successful response
          schema:
            type: array
            items: {$ref: '#/definitions/album'}
        404:
          description: Shelf does not exist
          schema: {$ref: '#/definitions/error'}

    post:
      description: |
        POST adds an album to the shelf.
      parameters:
        - name: id
          in: path
          type: number
          required: true
          description: ID of the shelf
        - name: album_id
          in: formData
          type: number
          required: true
          description: ID of the album to add
      responses:
        201:
          description:
            Success

  '/album/{id}':
    get:
      description:
        GET the details about an album.
      parameters:
        - name: id
          in: path
          description: ID of the album
          required: true
          type: number
      responses:
        200:
          description: Successful response
          schema: {$ref: '#/definitions/album'}
          examples:
            application/json:
              {
                index: 1,
                artist: "Pink Floyd",
                title: "Dark Side of the Moon",
                date: "1970",
                edition: "30th anniversary SACD",
              }
        404:
          description: Album does not exist
          schema: {$ref: '#/definitions/error'}

    put:
      description: |
        PUT updates an album. It is not possible to set the 'id', 'url', or 'created' properties.
        All other attributes must be provided. Missing attributes will default to empty values.
      parameters:
        - name: id
          in: path
          description: ID of the album
          required: true
          type: number
      responses:
        200:
          description: Successful response
          schema: {$ref: '#/definitions/album'}
        404:
          description: Album does not exist
          schema: {$ref: '#/definitions/error'}

    delete:
      description: |
        DELETE removes an album from every shelf it is on.
      parameters:
        - name: id
          in: path
          description: ID of the album
          required: true
          type: number
      responses:
        204:
          description: Successful deletion
        404:
          description: Album does not exist
          schema: {$ref: '#/definitions/error'}

  '/album':
    post:
      description: |
        Create a new album.
      consumes:
        - application/json
      parameters:
        - name: album
          in: body
          description: Album object
          required: true
          schema: {$ref: '#/definitions/album'}
      responses:
        201:
          description: Album created
          headers:
            Location: {description: 'URL of the album', type: string}


definitions:
  shelf:
    title: Shelf
    type: object
    properties:
      id:
        type: number
        description: ID of the shelf
      name:
        type: string
        description: Name of the shelf
      url:
        type: string
        description: URL of the shelf resource
      album_urls:
        type: array
        description: List of album resource URLS
        items:
          type: string

  album:
    title: Album
    type: object
    properties:
      id:
        type: number
        description: ID of the album
      url:
        type: string
        description: URL of the album resource
      title:
        type: string
        description: Name of the album
      artist:
        type: string
        description: Name of the artist
      released:
        type: string
        description: |
          Date the album was originally released.
          YYYY, YYYY-MM, or YYYY-MM-DD.
          May be null.
      created:
        type: string
        description: |
          Date this object was created.
          RFC3339 format, YYYY-MM-DDTHH:MM:SSZ.
      edition:
        type: string
        description: A brief note about the format or (re)release date. May be empty.
      status:
        type: string
        description: 'One of "want", "have", or the empty string.'

  error:
    title: Error
    type: object
    properties:
      status:
        type: number
        description: HTTP status code
      developerMessage:
        type: string
        description: Error message for developers
      userMessage:
        type: string
        description: Error message for users
      code:
        type: number
        description: Internal error code
      details:
        type: string
        description: ???
